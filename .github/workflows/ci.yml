name: CI/CD Pipeline

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

env:
  GO_VERSION: '1.22'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [ '1.22' ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true
          cache-dependency-path: |
            send-agent/go.sum
            start-agents/go.sum
            hooks/reload-role/go.sum

      - name: Install tmux
        run: |
          sudo apt-get update
          sudo apt-get install -y tmux

      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.54.2
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

      - name: Test send-agent
        run: |
          cd send-agent
          make test

      - name: Test start-agents (CI Environment)
        env:
          CI: true
          CLAUDE_MOCK_ENV: true
          CLAUDE_CLI_MOCK: true
        run: |
          cd start-agents
          make test

      - name: Test hooks/reload-role
        run: |
          cd hooks/reload-role
          make test

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          cache-dependency-path: |
            send-agent/go.sum
            start-agents/go.sum
            hooks/reload-role/go.sum

      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v2.2.2
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

      - name: Lint send-agent
        run: |
          cd send-agent
          make lint

      - name: Lint start-agents
        run: |
          cd start-agents
          make lint

      - name: Lint hooks/reload-role
        run: |
          cd hooks/reload-role
          make lint

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, lint]
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          cache-dependency-path: |
            send-agent/go.sum
            start-agents/go.sum
            hooks/reload-role/go.sum

      - name: Build send-agent
        env:
          CGO_ENABLED: 0
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          cd send-agent
          make build

      - name: Build start-agents
        env:
          CGO_ENABLED: 0
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          cd start-agents
          make build

      - name: Build hooks/reload-role
        env:
          CGO_ENABLED: 0
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          cd hooks/reload-role
          make build

  source-archive:
    name: Source Archive
    runs-on: ubuntu-latest
    needs: [test, lint, build]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get tag name
        id: tag
        run: echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Create source archive
        run: |
          zip -r "source-${{ steps.tag.outputs.tag }}.zip" . \
            -x ".git/*" \
            -x ".github/*" \
            -x "build/*" \
            -x "coverage.*" \
            -x "*.log"

      - name: Upload source archive
        uses: actions/upload-artifact@v4
        with:
          name: source-${{ steps.tag.outputs.tag }}
          path: source-${{ steps.tag.outputs.tag }}.zip
          retention-days: 90

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [test, lint, build, source-archive]
    if: always()
    steps:
      - name: Notify success
        if: ${{ needs.test.result == 'success' && needs.lint.result == 'success' && needs.build.result == 'success' }}
        run: |
          echo "✅ All CI/CD jobs completed successfully"

      - name: Notify failure
        if: ${{ needs.test.result == 'failure' || needs.lint.result == 'failure' || needs.build.result == 'failure' }}
        run: |
          echo "❌ CI/CD pipeline failed"
