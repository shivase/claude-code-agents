package cmd

import "fmt"

// ShowUsage Display help message (moved from main.go)
func ShowUsage() {
	fmt.Println("ðŸš€ AI Parallel Development Team - Integrated Launch System")
	fmt.Println("")
	fmt.Println("Usage:")
	fmt.Println("  claude-code-agents <session-name> [options]")
	fmt.Println("  claude-code-agents [management-commands]")
	fmt.Println("")
	fmt.Println("Arguments:")
	fmt.Println("  session-name     tmux session name (required)")
	fmt.Println("  ")
	fmt.Println("Options:")
	fmt.Println("  --reset          Delete existing session and recreate")
	fmt.Println("  --verbose, -v    Enable verbose logging")
	fmt.Println("  --debug, -d      Enable debug logging")
	fmt.Println("  --silent, -s     Silent mode (minimize log output)")
	fmt.Println("  --help           Show this help")
	fmt.Println("")
	fmt.Println("Management Commands:")
	fmt.Println("  --list             Show running AI team sessions")
	fmt.Println("  --delete [name]    Delete specified session")
	fmt.Println("  --delete-all       Delete all AI team sessions")
	fmt.Println("  --show-config      Show configuration summary")
	fmt.Println("  --config [session] Show detailed configuration")
	fmt.Println("  --generate-config  Generate configuration file template")
	fmt.Println("    --force          Overwrite existing files")
	fmt.Println("  --init [ja|en]     Initialize system (create directories and config files)")
	fmt.Println("    --force          Overwrite existing files during initialization")
	fmt.Println("")
	fmt.Println("  --doctor           Run system health check")
	fmt.Println("")
	fmt.Println("Examples:")
	fmt.Println("  claude-code-agents myproject               # Launch integrated monitoring with myproject session")
	fmt.Println("  claude-code-agents ai-team                 # Launch integrated monitoring with ai-team session")
	fmt.Println("  claude-code-agents myproject --reset       # Recreate myproject session")
	fmt.Println("  claude-code-agents myproject --verbose     # Launch with verbose logging")
	fmt.Println("  claude-code-agents myproject --silent      # Launch in silent mode")
	fmt.Println("  claude-code-agents --list                    # Show session list")
	fmt.Println("  claude-code-agents --delete myproject        # Delete myproject session")
	fmt.Println("  claude-code-agents --delete-all              # Delete all sessions")
	fmt.Println("  claude-code-agents --show-config             # Show configuration summary")
	fmt.Println("  claude-code-agents --config ai-team          # Show detailed configuration for ai-team session")
	fmt.Println("  claude-code-agents --generate-config         # Generate configuration file template")
	fmt.Println("  claude-code-agents --generate-config --force # Overwrite and generate configuration file")
	fmt.Println("  claude-code-agents --init ja                 # Initialize system with Japanese instructions")
	fmt.Println("  claude-code-agents --init en                 # Initialize system with English instructions")
	fmt.Println("  claude-code-agents --init ja --force         # Overwrite and initialize with Japanese instructions")
	fmt.Println("")
	fmt.Println("  claude-code-agents --doctor                  # Run system health check")
	fmt.Println("")
	fmt.Println("Environment Variables:")
	fmt.Println("  VERBOSE=true       Enable verbose logging")
	fmt.Println("  SILENT=true        Enable silent mode")
	fmt.Println("")
}
