package main

import (
	"fmt"
	"os"
	"path/filepath"
	"strings"
)

// generateConfigCommand 設定ファイル生成コマンド
func generateConfigCommand(force bool) error {
	fmt.Println("🔧 設定ファイル生成")
	fmt.Println("===================")
	
	// 設定ファイルの生成パスを取得
	configPath := GetTeamConfigPath()
	
	// 設定ディレクトリの作成
	configDir := filepath.Dir(configPath)
	if err := os.MkdirAll(configDir, 0755); err != nil {
		return fmt.Errorf("設定ディレクトリの作成に失敗しました: %v", err)
	}
	
	// 既存ファイルの確認
	if _, err := os.Stat(configPath); err == nil && !force {
		fmt.Printf("⚠️ 設定ファイルが既に存在します: %s\n", configPath)
		fmt.Println("既存のファイルを上書きするには --force オプションを使用してください。")
		fmt.Println("")
		fmt.Println("使用例:")
		fmt.Println("  ./claude-code-agents --generate-config --force")
		return fmt.Errorf("設定ファイルが既に存在します")
	}
	
	// 設定テンプレートの生成
	template := generateConfigTemplate()
	
	// ファイルの書き込み
	if err := os.WriteFile(configPath, []byte(template), 0644); err != nil {
		return fmt.Errorf("設定ファイルの作成に失敗しました: %v", err)
	}
	
	fmt.Printf("✅ 設定ファイルが正常に生成されました: %s\n", configPath)
	fmt.Println("")
	fmt.Println("📋 生成された設定ファイルの内容:")
	fmt.Println("   - 33項目の設定項目")
	fmt.Println("   - 6カテゴリの分類")
	fmt.Println("   - 適切なデフォルト値")
	fmt.Println("   - 詳細なコメント")
	fmt.Println("")
	fmt.Println("📝 設定ファイルを編集して、環境に合わせてカスタマイズしてください。")
	fmt.Println("   編集後、以下のコマンドでシステムを起動できます:")
	fmt.Printf("   ./claude-code-agents <セッション名>\n")
	
	return nil
}

// generateConfigTemplate 設定テンプレートの生成
func generateConfigTemplate() string {
	homeDir, _ := os.UserHomeDir()
	claudeDir := filepath.Join(homeDir, ".claude")
	cloudCodeAgentsDir := filepath.Join(claudeDir, "cloud-code-agents")
	
	var template strings.Builder
	
	// ヘッダー
	template.WriteString("# AI Teams System Configuration File\n")
	template.WriteString("# Generated by claude-code-agents --generate-config\n")
	template.WriteString("# Edit this file to customize your AI teams system\n")
	template.WriteString("\n")
	
	// Path Configuration
	template.WriteString("# ==========================================\n")
	template.WriteString("# Path Configuration\n")
	template.WriteString("# ==========================================\n")
	template.WriteString("\n")
	template.WriteString("# Claude CLI executable path\n")
	template.WriteString(fmt.Sprintf("CLAUDE_CLI_PATH=%s\n", filepath.Join(claudeDir, "local", "claude")))
	template.WriteString("\n")
	template.WriteString("# Instructions directory for AI agents\n")
	template.WriteString(fmt.Sprintf("INSTRUCTIONS_DIR=%s\n", filepath.Join(cloudCodeAgentsDir, "instructions")))
	template.WriteString("\n")
	template.WriteString("# Working directory for AI teams\n")
	template.WriteString("WORKING_DIR=.\n")
	template.WriteString("\n")
	template.WriteString("# Configuration directory\n")
	template.WriteString(fmt.Sprintf("CONFIG_DIR=%s\n", cloudCodeAgentsDir))
	template.WriteString("\n")
	template.WriteString("# Log file path\n")
	template.WriteString(fmt.Sprintf("LOG_FILE=%s\n", filepath.Join(cloudCodeAgentsDir, "logs", "manager.log")))
	template.WriteString("\n")
	template.WriteString("# Authentication backup directory\n")
	template.WriteString(fmt.Sprintf("AUTH_BACKUP_DIR=%s\n", filepath.Join(cloudCodeAgentsDir, "auth_backup")))
	template.WriteString("\n")
	
	// System Settings
	template.WriteString("# ==========================================\n")
	template.WriteString("# System Settings\n")
	template.WriteString("# ==========================================\n")
	template.WriteString("\n")
	template.WriteString("# Maximum number of concurrent processes\n")
	template.WriteString("MAX_PROCESSES=4\n")
	template.WriteString("\n")
	template.WriteString("# Maximum memory usage in MB\n")
	template.WriteString("MAX_MEMORY_MB=1024\n")
	template.WriteString("\n")
	template.WriteString("# Maximum CPU usage percentage\n")
	template.WriteString("MAX_CPU_PERCENT=80.0\n")
	template.WriteString("\n")
	template.WriteString("# Log level (debug, info, warn, error)\n")
	template.WriteString("LOG_LEVEL=info\n")
	template.WriteString("\n")
	template.WriteString("# Health check interval\n")
	template.WriteString("HEALTH_CHECK_INTERVAL=30s\n")
	template.WriteString("\n")
	template.WriteString("# Maximum restart attempts\n")
	template.WriteString("MAX_RESTART_ATTEMPTS=3\n")
	template.WriteString("\n")
	
	// Tmux Settings
	template.WriteString("# ==========================================\n")
	template.WriteString("# Tmux Settings\n")
	template.WriteString("# ==========================================\n")
	template.WriteString("\n")
	template.WriteString("# Default session name\n")
	template.WriteString("SESSION_NAME=ai-teams\n")
	template.WriteString("\n")
	template.WriteString("# Default layout (integrated, individual)\n")
	template.WriteString("DEFAULT_LAYOUT=integrated\n")
	template.WriteString("\n")
	template.WriteString("# Auto attach to session\n")
	template.WriteString("AUTO_ATTACH=false\n")
	template.WriteString("\n")
	template.WriteString("# Number of panes in integrated layout\n")
	template.WriteString("PANE_COUNT=6\n")
	template.WriteString("\n")
	
	// Authentication Settings
	template.WriteString("# ==========================================\n")
	template.WriteString("# Authentication Settings\n")
	template.WriteString("# ==========================================\n")
	template.WriteString("\n")
	template.WriteString("# Authentication check interval\n")
	template.WriteString("AUTH_CHECK_INTERVAL=30m\n")
	template.WriteString("\n")
	template.WriteString("# Enable IDE backup\n")
	template.WriteString("IDE_BACKUP_ENABLED=true\n")
	template.WriteString("\n")
	
	// Performance Settings
	template.WriteString("# ==========================================\n")
	template.WriteString("# Performance Settings\n")
	template.WriteString("# ==========================================\n")
	template.WriteString("\n")
	template.WriteString("# System startup timeout\n")
	template.WriteString("STARTUP_TIMEOUT=10s\n")
	template.WriteString("\n")
	template.WriteString("# System shutdown timeout\n")
	template.WriteString("SHUTDOWN_TIMEOUT=15s\n")
	template.WriteString("\n")
	template.WriteString("# Process restart delay\n")
	template.WriteString("RESTART_DELAY=5s\n")
	template.WriteString("\n")
	template.WriteString("# Process timeout\n")
	template.WriteString("PROCESS_TIMEOUT=30s\n")
	template.WriteString("\n")
	
	// Command Names
	template.WriteString("# ==========================================\n")
	template.WriteString("# Command Names\n")
	template.WriteString("# ==========================================\n")
	template.WriteString("\n")
	template.WriteString("# Send agent command name\n")
	template.WriteString("SEND_COMMAND=send-agent\n")
	template.WriteString("\n")
	template.WriteString("# Binary name\n")
	template.WriteString("BINARY_NAME=claude-code-agents\n")
	template.WriteString("\n")
	
	// フッター
	template.WriteString("# ==========================================\n")
	template.WriteString("# End of Configuration\n")
	template.WriteString("# ==========================================\n")
	template.WriteString("# For more information, see the documentation\n")
	template.WriteString("# or run: ./claude-code-agents --help\n")
	
	return template.String()
}